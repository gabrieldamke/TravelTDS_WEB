//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    getAllAtracoes(  cancelToken?: CancelToken | undefined): Promise<AtracaoTuristica> {
        let url_ = this.baseUrl + "/api/AtracaoTuristica";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllAtracoes(_response);
        });
    }

    protected processGetAllAtracoes(response: AxiosResponse): Promise<AtracaoTuristica> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AtracaoTuristica.fromJS(resultData200);
            return Promise.resolve<AtracaoTuristica>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AtracaoTuristica>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    atracaoTuristicaPOST(body?: AtracaoTuristica | undefined , cancelToken?: CancelToken | undefined): Promise<AtracaoTuristica> {
        let url_ = this.baseUrl + "/api/AtracaoTuristica";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAtracaoTuristicaPOST(_response);
        });
    }

    protected processAtracaoTuristicaPOST(response: AxiosResponse): Promise<AtracaoTuristica> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AtracaoTuristica.fromJS(resultData200);
            return Promise.resolve<AtracaoTuristica>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AtracaoTuristica>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    atracaoTuristicaPUT(body?: AtracaoTuristica | undefined , cancelToken?: CancelToken | undefined): Promise<AtracaoTuristica> {
        let url_ = this.baseUrl + "/api/AtracaoTuristica";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAtracaoTuristicaPUT(_response);
        });
    }

    protected processAtracaoTuristicaPUT(response: AxiosResponse): Promise<AtracaoTuristica> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AtracaoTuristica.fromJS(resultData200);
            return Promise.resolve<AtracaoTuristica>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AtracaoTuristica>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    atracaoTuristicaDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<AtracaoTuristica> {
        let url_ = this.baseUrl + "/api/AtracaoTuristica?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAtracaoTuristicaDELETE(_response);
        });
    }

    protected processAtracaoTuristicaDELETE(response: AxiosResponse): Promise<AtracaoTuristica> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AtracaoTuristica.fromJS(resultData200);
            return Promise.resolve<AtracaoTuristica>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AtracaoTuristica>(null as any);
    }

    /**
     * @return Success
     */
    getAtracaoById(id: number , cancelToken?: CancelToken | undefined): Promise<AtracaoTuristica> {
        let url_ = this.baseUrl + "/api/AtracaoTuristica/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAtracaoById(_response);
        });
    }

    protected processGetAtracaoById(response: AxiosResponse): Promise<AtracaoTuristica> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AtracaoTuristica.fromJS(resultData200);
            return Promise.resolve<AtracaoTuristica>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AtracaoTuristica>(null as any);
    }

    /**
     * @return Success
     */
    destinoAll(  cancelToken?: CancelToken | undefined): Promise<Destino[]> {
        let url_ = this.baseUrl + "/api/Destino";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDestinoAll(_response);
        });
    }

    protected processDestinoAll(response: AxiosResponse): Promise<Destino[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Destino.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Destino[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Destino[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    destinoPOST(body?: Destino | undefined , cancelToken?: CancelToken | undefined): Promise<Destino> {
        let url_ = this.baseUrl + "/api/Destino";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDestinoPOST(_response);
        });
    }

    protected processDestinoPOST(response: AxiosResponse): Promise<Destino> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Destino.fromJS(resultData200);
            return Promise.resolve<Destino>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Destino>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    destinoPUT(body?: Destino | undefined , cancelToken?: CancelToken | undefined): Promise<Destino> {
        let url_ = this.baseUrl + "/api/Destino";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDestinoPUT(_response);
        });
    }

    protected processDestinoPUT(response: AxiosResponse): Promise<Destino> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Destino.fromJS(resultData200);
            return Promise.resolve<Destino>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Destino>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    destinoDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<Destino> {
        let url_ = this.baseUrl + "/api/Destino?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDestinoDELETE(_response);
        });
    }

    protected processDestinoDELETE(response: AxiosResponse): Promise<Destino> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Destino.fromJS(resultData200);
            return Promise.resolve<Destino>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Destino>(null as any);
    }

    /**
     * @return Success
     */
    destinoGET(id: number , cancelToken?: CancelToken | undefined): Promise<Destino> {
        let url_ = this.baseUrl + "/api/Destino/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDestinoGET(_response);
        });
    }

    protected processDestinoGET(response: AxiosResponse): Promise<Destino> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Destino.fromJS(resultData200);
            return Promise.resolve<Destino>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Destino>(null as any);
    }

    /**
     * @return Success
     */
    hotelAll(  cancelToken?: CancelToken | undefined): Promise<Hotel[]> {
        let url_ = this.baseUrl + "/api/Hotel";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHotelAll(_response);
        });
    }

    protected processHotelAll(response: AxiosResponse): Promise<Hotel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Hotel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Hotel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Hotel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hotelPOST(body?: Hotel | undefined , cancelToken?: CancelToken | undefined): Promise<Hotel> {
        let url_ = this.baseUrl + "/api/Hotel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHotelPOST(_response);
        });
    }

    protected processHotelPOST(response: AxiosResponse): Promise<Hotel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Hotel.fromJS(resultData200);
            return Promise.resolve<Hotel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Hotel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hotelPUT(body?: Hotel | undefined , cancelToken?: CancelToken | undefined): Promise<Hotel> {
        let url_ = this.baseUrl + "/api/Hotel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHotelPUT(_response);
        });
    }

    protected processHotelPUT(response: AxiosResponse): Promise<Hotel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Hotel.fromJS(resultData200);
            return Promise.resolve<Hotel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Hotel>(null as any);
    }

    /**
     * @return Success
     */
    hotelGET(id: number , cancelToken?: CancelToken | undefined): Promise<Hotel> {
        let url_ = this.baseUrl + "/api/Hotel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHotelGET(_response);
        });
    }

    protected processHotelGET(response: AxiosResponse): Promise<Hotel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Hotel.fromJS(resultData200);
            return Promise.resolve<Hotel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Hotel>(null as any);
    }

    /**
     * @return Success
     */
    hotelDELETE(id: number , cancelToken?: CancelToken | undefined): Promise<Hotel> {
        let url_ = this.baseUrl + "/api/Hotel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHotelDELETE(_response);
        });
    }

    protected processHotelDELETE(response: AxiosResponse): Promise<Hotel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Hotel.fromJS(resultData200);
            return Promise.resolve<Hotel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Hotel>(null as any);
    }

    /**
     * @return Success
     */
    localAll(  cancelToken?: CancelToken | undefined): Promise<Local[]> {
        let url_ = this.baseUrl + "/api/Local";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalAll(_response);
        });
    }

    protected processLocalAll(response: AxiosResponse): Promise<Local[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Local.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Local[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Local[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    localPOST(body?: Local | undefined , cancelToken?: CancelToken | undefined): Promise<Local> {
        let url_ = this.baseUrl + "/api/Local";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalPOST(_response);
        });
    }

    protected processLocalPOST(response: AxiosResponse): Promise<Local> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Local.fromJS(resultData200);
            return Promise.resolve<Local>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Local>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    localPUT(body?: Local | undefined , cancelToken?: CancelToken | undefined): Promise<Local> {
        let url_ = this.baseUrl + "/api/Local";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalPUT(_response);
        });
    }

    protected processLocalPUT(response: AxiosResponse): Promise<Local> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Local.fromJS(resultData200);
            return Promise.resolve<Local>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Local>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    localDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<Local> {
        let url_ = this.baseUrl + "/api/Local?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalDELETE(_response);
        });
    }

    protected processLocalDELETE(response: AxiosResponse): Promise<Local> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Local.fromJS(resultData200);
            return Promise.resolve<Local>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Local>(null as any);
    }

    /**
     * @return Success
     */
    localGET(id: number , cancelToken?: CancelToken | undefined): Promise<Local> {
        let url_ = this.baseUrl + "/api/Local/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalGET(_response);
        });
    }

    protected processLocalGET(response: AxiosResponse): Promise<Local> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Local.fromJS(resultData200);
            return Promise.resolve<Local>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Local>(null as any);
    }

    /**
     * @return Success
     */
    parteViagemAll(  cancelToken?: CancelToken | undefined): Promise<ParteViagem[]> {
        let url_ = this.baseUrl + "/api/ParteViagem";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParteViagemAll(_response);
        });
    }

    protected processParteViagemAll(response: AxiosResponse): Promise<ParteViagem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ParteViagem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ParteViagem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ParteViagem[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    parteViagemPOST(body?: ParteViagem | undefined , cancelToken?: CancelToken | undefined): Promise<ParteViagem> {
        let url_ = this.baseUrl + "/api/ParteViagem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParteViagemPOST(_response);
        });
    }

    protected processParteViagemPOST(response: AxiosResponse): Promise<ParteViagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ParteViagem.fromJS(resultData200);
            return Promise.resolve<ParteViagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ParteViagem>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    parteViagemPUT(body?: ParteViagem | undefined , cancelToken?: CancelToken | undefined): Promise<ParteViagem> {
        let url_ = this.baseUrl + "/api/ParteViagem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParteViagemPUT(_response);
        });
    }

    protected processParteViagemPUT(response: AxiosResponse): Promise<ParteViagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ParteViagem.fromJS(resultData200);
            return Promise.resolve<ParteViagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ParteViagem>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    parteViagemDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<ParteViagem> {
        let url_ = this.baseUrl + "/api/ParteViagem?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParteViagemDELETE(_response);
        });
    }

    protected processParteViagemDELETE(response: AxiosResponse): Promise<ParteViagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ParteViagem.fromJS(resultData200);
            return Promise.resolve<ParteViagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ParteViagem>(null as any);
    }

    /**
     * @return Success
     */
    parteViagemGET(id: number , cancelToken?: CancelToken | undefined): Promise<ParteViagem> {
        let url_ = this.baseUrl + "/api/ParteViagem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParteViagemGET(_response);
        });
    }

    protected processParteViagemGET(response: AxiosResponse): Promise<ParteViagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ParteViagem.fromJS(resultData200);
            return Promise.resolve<ParteViagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ParteViagem>(null as any);
    }

    /**
     * @return Success
     */
    restauranteAll(  cancelToken?: CancelToken | undefined): Promise<Restaurante[]> {
        let url_ = this.baseUrl + "/api/Restaurante";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRestauranteAll(_response);
        });
    }

    protected processRestauranteAll(response: AxiosResponse): Promise<Restaurante[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Restaurante.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Restaurante[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Restaurante[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    restaurantePOST(body?: Restaurante | undefined , cancelToken?: CancelToken | undefined): Promise<Restaurante> {
        let url_ = this.baseUrl + "/api/Restaurante";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRestaurantePOST(_response);
        });
    }

    protected processRestaurantePOST(response: AxiosResponse): Promise<Restaurante> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Restaurante.fromJS(resultData200);
            return Promise.resolve<Restaurante>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Restaurante>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    restaurantePUT(body?: Restaurante | undefined , cancelToken?: CancelToken | undefined): Promise<Restaurante> {
        let url_ = this.baseUrl + "/api/Restaurante";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRestaurantePUT(_response);
        });
    }

    protected processRestaurantePUT(response: AxiosResponse): Promise<Restaurante> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Restaurante.fromJS(resultData200);
            return Promise.resolve<Restaurante>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Restaurante>(null as any);
    }

    /**
     * @return Success
     */
    restauranteGET(id: number , cancelToken?: CancelToken | undefined): Promise<Restaurante> {
        let url_ = this.baseUrl + "/api/Restaurante/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRestauranteGET(_response);
        });
    }

    protected processRestauranteGET(response: AxiosResponse): Promise<Restaurante> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Restaurante.fromJS(resultData200);
            return Promise.resolve<Restaurante>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Restaurante>(null as any);
    }

    /**
     * @return Success
     */
    restauranteDELETE(id: number , cancelToken?: CancelToken | undefined): Promise<Restaurante> {
        let url_ = this.baseUrl + "/api/Restaurante/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRestauranteDELETE(_response);
        });
    }

    protected processRestauranteDELETE(response: AxiosResponse): Promise<Restaurante> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Restaurante.fromJS(resultData200);
            return Promise.resolve<Restaurante>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Restaurante>(null as any);
    }

    /**
     * @return Success
     */
    usuarioAll(  cancelToken?: CancelToken | undefined): Promise<Usuario[]> {
        let url_ = this.baseUrl + "/api/Usuario";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsuarioAll(_response);
        });
    }

    protected processUsuarioAll(response: AxiosResponse): Promise<Usuario[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Usuario.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Usuario[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Usuario[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    usuarioPOST(body?: Usuario | undefined , cancelToken?: CancelToken | undefined): Promise<Usuario> {
        let url_ = this.baseUrl + "/api/Usuario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsuarioPOST(_response);
        });
    }

    protected processUsuarioPOST(response: AxiosResponse): Promise<Usuario> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Usuario.fromJS(resultData200);
            return Promise.resolve<Usuario>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Usuario>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    usuarioPUT(body?: Usuario | undefined , cancelToken?: CancelToken | undefined): Promise<Usuario> {
        let url_ = this.baseUrl + "/api/Usuario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsuarioPUT(_response);
        });
    }

    protected processUsuarioPUT(response: AxiosResponse): Promise<Usuario> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Usuario.fromJS(resultData200);
            return Promise.resolve<Usuario>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Usuario>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    usuarioDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<Usuario> {
        let url_ = this.baseUrl + "/api/Usuario?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsuarioDELETE(_response);
        });
    }

    protected processUsuarioDELETE(response: AxiosResponse): Promise<Usuario> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Usuario.fromJS(resultData200);
            return Promise.resolve<Usuario>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Usuario>(null as any);
    }

    /**
     * @return Success
     */
    usuarioGET(id: number , cancelToken?: CancelToken | undefined): Promise<Usuario> {
        let url_ = this.baseUrl + "/api/Usuario/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsuarioGET(_response);
        });
    }

    protected processUsuarioGET(response: AxiosResponse): Promise<Usuario> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Usuario.fromJS(resultData200);
            return Promise.resolve<Usuario>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Usuario>(null as any);
    }

    /**
     * @return Success
     */
    viagemAll(  cancelToken?: CancelToken | undefined): Promise<Viagem[]> {
        let url_ = this.baseUrl + "/api/Viagem";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViagemAll(_response);
        });
    }

    protected processViagemAll(response: AxiosResponse): Promise<Viagem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Viagem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Viagem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Viagem[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    viagemPOST(body?: Viagem | undefined , cancelToken?: CancelToken | undefined): Promise<Viagem> {
        let url_ = this.baseUrl + "/api/Viagem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViagemPOST(_response);
        });
    }

    protected processViagemPOST(response: AxiosResponse): Promise<Viagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Viagem.fromJS(resultData200);
            return Promise.resolve<Viagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Viagem>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    viagemPUT(body?: Viagem | undefined , cancelToken?: CancelToken | undefined): Promise<Viagem> {
        let url_ = this.baseUrl + "/api/Viagem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViagemPUT(_response);
        });
    }

    protected processViagemPUT(response: AxiosResponse): Promise<Viagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Viagem.fromJS(resultData200);
            return Promise.resolve<Viagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Viagem>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    viagemDELETE(id?: number | undefined , cancelToken?: CancelToken | undefined): Promise<Viagem> {
        let url_ = this.baseUrl + "/api/Viagem?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViagemDELETE(_response);
        });
    }

    protected processViagemDELETE(response: AxiosResponse): Promise<Viagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Viagem.fromJS(resultData200);
            return Promise.resolve<Viagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Viagem>(null as any);
    }

    /**
     * @return Success
     */
    viagemGET(id: number , cancelToken?: CancelToken | undefined): Promise<Viagem> {
        let url_ = this.baseUrl + "/api/Viagem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViagemGET(_response);
        });
    }

    protected processViagemGET(response: AxiosResponse): Promise<Viagem> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Viagem.fromJS(resultData200);
            return Promise.resolve<Viagem>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Viagem>(null as any);
    }
}

export class AtracaoTuristica {
    id?: number;
    nome?: string | undefined;
    descricao?: string | undefined;
    imagemBase64?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.descricao = _data["descricao"];
            this.imagemBase64 = _data["imagemBase64"];
        }
    }

    static fromJS(data: any): AtracaoTuristica {
        data = typeof data === 'object' ? data : {};
        let result = new AtracaoTuristica();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["descricao"] = this.descricao;
        data["imagemBase64"] = this.imagemBase64;
        return data;
    }
}

export class Destino {
    id?: number;
    nome?: string | undefined;
    descricao?: string | undefined;
    local?: Local;
    atracoes?: AtracaoTuristica[] | undefined;
    hoteis?: Hotel[] | undefined;
    restaurantes?: Restaurante[] | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.descricao = _data["descricao"];
            this.local = _data["local"] ? Local.fromJS(_data["local"]) : <any>undefined;
            if (Array.isArray(_data["atracoes"])) {
                this.atracoes = [] as any;
                for (let item of _data["atracoes"])
                    this.atracoes!.push(AtracaoTuristica.fromJS(item));
            }
            if (Array.isArray(_data["hoteis"])) {
                this.hoteis = [] as any;
                for (let item of _data["hoteis"])
                    this.hoteis!.push(Hotel.fromJS(item));
            }
            if (Array.isArray(_data["restaurantes"])) {
                this.restaurantes = [] as any;
                for (let item of _data["restaurantes"])
                    this.restaurantes!.push(Restaurante.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Destino {
        data = typeof data === 'object' ? data : {};
        let result = new Destino();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["descricao"] = this.descricao;
        data["local"] = this.local ? this.local.toJSON() : <any>undefined;
        if (Array.isArray(this.atracoes)) {
            data["atracoes"] = [];
            for (let item of this.atracoes)
                data["atracoes"].push(item.toJSON());
        }
        if (Array.isArray(this.hoteis)) {
            data["hoteis"] = [];
            for (let item of this.hoteis)
                data["hoteis"].push(item.toJSON());
        }
        if (Array.isArray(this.restaurantes)) {
            data["restaurantes"] = [];
            for (let item of this.restaurantes)
                data["restaurantes"].push(item.toJSON());
        }
        return data;
    }
}

export class Hotel {
    id?: number;
    nome?: string | undefined;
    endereco?: string | undefined;
    classificacao?: number;
    imagemBase64?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.endereco = _data["endereco"];
            this.classificacao = _data["classificacao"];
            this.imagemBase64 = _data["imagemBase64"];
        }
    }

    static fromJS(data: any): Hotel {
        data = typeof data === 'object' ? data : {};
        let result = new Hotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["endereco"] = this.endereco;
        data["classificacao"] = this.classificacao;
        data["imagemBase64"] = this.imagemBase64;
        return data;
    }
}

export class Local {
    id?: number;
    nome?: string | undefined;
    endereco?: string | undefined;
    cidade?: string | undefined;
    estado?: string | undefined;
    pais?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.endereco = _data["endereco"];
            this.cidade = _data["cidade"];
            this.estado = _data["estado"];
            this.pais = _data["pais"];
        }
    }

    static fromJS(data: any): Local {
        data = typeof data === 'object' ? data : {};
        let result = new Local();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["endereco"] = this.endereco;
        data["cidade"] = this.cidade;
        data["estado"] = this.estado;
        data["pais"] = this.pais;
        return data;
    }
}

export class ParteViagem {
    id?: number;
    idViagem?: number;
    destino?: Destino;
    dataInical?: Date;
    dataFinal?: Date;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.idViagem = _data["idViagem"];
            this.destino = _data["destino"] ? Destino.fromJS(_data["destino"]) : <any>undefined;
            this.dataInical = _data["dataInical"] ? new Date(_data["dataInical"].toString()) : <any>undefined;
            this.dataFinal = _data["dataFinal"] ? new Date(_data["dataFinal"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ParteViagem {
        data = typeof data === 'object' ? data : {};
        let result = new ParteViagem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idViagem"] = this.idViagem;
        data["destino"] = this.destino ? this.destino.toJSON() : <any>undefined;
        data["dataInical"] = this.dataInical ? this.dataInical.toISOString() : <any>undefined;
        data["dataFinal"] = this.dataFinal ? this.dataFinal.toISOString() : <any>undefined;
        return data;
    }
}

export class ProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export class Restaurante {
    id?: number;
    nome?: string | undefined;
    local?: Local;
    tipoCozinha?: TipoCozinha;
    imagemBase64?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nome = _data["nome"];
            this.local = _data["local"] ? Local.fromJS(_data["local"]) : <any>undefined;
            this.tipoCozinha = _data["tipoCozinha"];
            this.imagemBase64 = _data["imagemBase64"];
        }
    }

    static fromJS(data: any): Restaurante {
        data = typeof data === 'object' ? data : {};
        let result = new Restaurante();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nome"] = this.nome;
        data["local"] = this.local ? this.local.toJSON() : <any>undefined;
        data["tipoCozinha"] = this.tipoCozinha;
        data["imagemBase64"] = this.imagemBase64;
        return data;
    }
}

export enum TipoCozinha {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class Usuario {
    id?: number;
    email?: string | undefined;
    senha?: string | undefined;
    nome?: string | undefined;
    telefone?: string | undefined;
    itinerario?: Viagem[] | undefined;
    imagemPerfilBase64?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.senha = _data["senha"];
            this.nome = _data["nome"];
            this.telefone = _data["telefone"];
            if (Array.isArray(_data["itinerario"])) {
                this.itinerario = [] as any;
                for (let item of _data["itinerario"])
                    this.itinerario!.push(Viagem.fromJS(item));
            }
            this.imagemPerfilBase64 = _data["imagemPerfilBase64"];
        }
    }

    static fromJS(data: any): Usuario {
        data = typeof data === 'object' ? data : {};
        let result = new Usuario();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["senha"] = this.senha;
        data["nome"] = this.nome;
        data["telefone"] = this.telefone;
        if (Array.isArray(this.itinerario)) {
            data["itinerario"] = [];
            for (let item of this.itinerario)
                data["itinerario"].push(item.toJSON());
        }
        data["imagemPerfilBase64"] = this.imagemPerfilBase64;
        return data;
    }
}

export class Viagem {
    id?: number;
    partesViagem?: ParteViagem[] | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["partesViagem"])) {
                this.partesViagem = [] as any;
                for (let item of _data["partesViagem"])
                    this.partesViagem!.push(ParteViagem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Viagem {
        data = typeof data === 'object' ? data : {};
        let result = new Viagem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.partesViagem)) {
            data["partesViagem"] = [];
            for (let item of this.partesViagem)
                data["partesViagem"].push(item.toJSON());
        }
        return data;
    }
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}